import argparse
import sys

from Unification import Unification
from Geometric import GeometricColor
from ArithmeticSumGray import ArithmeticSumGray
from ArithmeticSumColor import ArithmeticSumColor

def main():
    # unificationModule()
    # grayArithmeticSumModule()
    # colorArithmeticSumModule()
    geometricModule()

def unificationModule():
    unification = Unification('Resources/kobieta.png', 'Resources/zawody.png', "L")
    unification.geometricGray()
    unification.rasterGray()
    # unification = Unification('Resources/art.png', 'Resources/lis-mis.png', "RGB")
    # unification.geometricColor()
    # unification.rasterColor()
    # unification = Unification('Resources/photoman.png', 'Resources/lena.png', 'L')
    # unification.geometricGray()
    # unification.rasterGray()
    # unification.geometricColor()
    # unification.rasterColor()
    # unification = Unification('Resources/phone.png', 'Resources/sea.png', 'RGB')
    # unification.geometricColor()
    # unification.rasterColor()

def grayArithmeticSumModule():
    gray = ArithmeticSumGray('Resources/zawody.png', 'Resources/portret.png', 'L')
    # gray.sumWithConst(75)
    # gray.sumImages()
    # gray.multiplyWithConst(1.5)
    # gray.multiplyWithConst(3)
    # gray.multiplyWithConst(0.5)
    # gray.multiplyWithConst(0.25)
    # gray.multiplyImages()
    # gray.blendImages(0.25)
    # gray.blendImages(0.5)
    # gray.blendImages(0.75)    
    gray.powerFirstImage(2)
    gray.powerFirstImage(3)
    # gray.divideWithConst(3)
    # gray.divideWithConst(7)
    # gray.divideImages()
    # gray.rootFirstImage(2)
    # gray.rootFirstImage(4)
    # gray.logarithm()
    gray = ArithmeticSumGray('Resources/ptak.png', 'Resources/portret.png', 'L')
    # gray.sumWithConst(30)
    # gray.sumWithConst(300)
    # gray.sumImages()
    # gray.multiplyWithConst(1.5)
    # gray.multiplyWithConst(3.5)
    # gray.multiplyImages()
    gray.powerFirstImage(2)
    gray.powerFirstImage(5)
    # gray.divideWithConst(2)
    # gray.divideWithConst(10)
    # gray.divideImages()
    # gray.rootFirstImage(2)
    # gray.rootFirstImage(3)
    gray.logarithm()
    # gray = ArithmeticSumGray('Resources/cat.png', 'Resources/window-mask.png', 'L')
    # gray.multiplyImages()
    # gray = ArithmeticSumGray('Resources/cat.png', 'Resources/mask.png', 'L')
    # gray.multiplyImages()

def colorArithmeticSumModule():
    color = ArithmeticSumColor('Resources/zima.png', 'Resources/zima.png', 'RGB')
    # color.sumWithConst(50)
    # color.sumWithConst(100)
    # color.sumWithConst(200)
    # color.sumImages()
    # color.multiplyWithConst(2)
    # color.multiplyWithConst(3)
    # color.multiplyImages()
    # color.blendImages(0.2)
    # color.blendImages(0.5)
    # color.blendImages(0.8)
    # color.powerFirstImage(2)
    # color.powerFirstImage(4)
    # color.divideWithConst(5)
    # color.divideWithConst(10)
    # color.divideImages()
    color.rootFirstImage(0.5)
    color.rootFirstImage(2)
    # color.logarithm()
    color = ArithmeticSumColor('Resources/art.png', 'Resources/zima.png', 'RGB')
    # color.sumWithConst(30)
    # color.sumWithConst(200)
    # color.sumWithConst(300)
    # color.sumImages()
    # color.multiplyWithConst(0.5)
    # color.multiplyWithConst(0.3)
    # color.multiplyImages()
    # color.powerFirstImage(3)
    # color.powerFirstImage(5)
    # color.divideWithConst(2)
    # color.divideWithConst(10)
    # color.divideImages()
    color.rootFirstImage(0.7)
    # color.rootFirstImage(4)
    # color.logarithm()

def geometricModule():
    color = GeometricColor('Resources/warzywa.png', "RGB")
    # color.translate(35, -150)
    # color.homogeneousScaling(2.0)
    color.nonUniformScaling(2, 4)
    # color.rotation(90)
    # color.rotation(105)
    # color.axisSymmetry(True, True)
    # color.axisSymmetry(True, False)
    # color.axisSymmetry(False, True)
    # color.axisSymmetry(False, False)
    # color.customSymmetryX(120)
    # color.customSymmetryY(99)
    # color.crop(100, 100, 200, 200)
    # color.copy(25, 25, 200, 200)
    color = GeometricColor('Resources/art.png', "RGB")
#     #color.translate(100, -100)
    # color.homogeneousScaling(2.0)
    color.nonUniformScaling(2.0, 3.0)
    # color.rotation(180)
    # color.rotation(105)
    # color.axisSymmetry(True, True)
    # color.axisSymmetry(True, False)
    # color.axisSymmetry(False, True)
    # color.axisSymmetry(False, False)
    # color.customSymmetryX(250)
    # color.customSymmetryY(150)
    # color.crop(200, 200, 500, 500)
    # color.copy(30, 30, 300, 300)


if __name__ == '__main__':
    main()